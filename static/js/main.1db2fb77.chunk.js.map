{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","state","currentItem","username","items","isUpdate","handleChange","bind","handleSubmit","e","this","setState","target","name","value","itemId","preventDefault","item","title","user","database","ref","update","console","log","push","id","on","snapshot","val","newState","remove","itemFound","find","className","onSubmit","type","placeholder","onChange","map","key","onClick","removeItem","updateItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UAYEA,IAASC,cAVI,CACXC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,eACnBC,MAAO,8CAKMR,QAAf,ECsHaS,E,YA9Hb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,YAAa,GACbC,SAAU,GACVC,MAAO,GACPC,UAAU,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATR,E,0EAYDE,GACXC,KAAKC,SAAL,eACGF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,U,mCAIjBL,EAAGM,GACdN,EAAEO,iBACF,IAAMC,EAAO,CACXC,MAAOR,KAAKT,MAAMC,YAClBiB,KAAMT,KAAKT,MAAME,UAGdY,GAQaxB,EAAS6B,WAAWC,IAApB,iBAAkCN,IAC1CO,OAAOL,GACfM,QAAQC,IAAI,YATKjC,EAAS6B,WAAWC,IAAI,SAChCI,KAAKR,GACdM,QAAQC,IAAI,QAWdd,KAAKC,SAAS,CACZR,SAAU,GACVD,YAAa,GACbG,UAAU,EACVqB,GAAI,O,0CAIa,IAAD,OACDnC,EAAS6B,WAAWC,IAAI,SAChCM,GAAG,SAAS,SAACC,GACpB,IAAIxB,EAAQwB,EAASC,MACjBC,EAAW,GAEf,IAAK,IAAIb,KAAQb,EACf0B,EAASL,KAAK,CACZC,GAAIT,EACJC,MAAOd,EAAMa,GAAMC,MACnBC,KAAMf,EAAMa,GAAME,OAItB,EAAKR,SAAS,CACZP,MAAO0B,S,iCAKFf,GACOxB,EAAS6B,WAAWC,IAApB,iBAAkCN,IAC1CgB,W,iCAGChB,GACT,IAAMiB,EAAYtB,KAAKT,MAAMG,MAAM6B,MAAK,SAAAhB,GAAI,OAAIA,EAAKS,KAAOX,KAE5DL,KAAKC,SAAS,CACZN,UAAU,EACVqB,GAAIM,EAAUN,GACdvB,SAAU6B,EAAUb,KACpBjB,YAAa8B,EAAUd,U,+BAKjB,IAAD,OACP,OACE,yBAAKgB,UAAU,OACb,gCACE,yBAAKA,UAAU,WACb,kDAGJ,yBAAKA,UAAU,aACb,6BAASA,UAAU,YACjB,0BAAMC,SAAU,SAAC1B,GAAD,OAAO,EAAKD,aAAaC,EAAG,EAAKR,MAAMyB,MACrD,2BAAOU,KAAK,OAAOf,IAAI,WAAWR,KAAK,WAAWwB,YAAY,oBAAoBC,SAAU5B,KAAKJ,aAAcQ,MAAOJ,KAAKT,MAAME,WACjI,2BAAOiC,KAAK,OAAOf,IAAI,cAAcR,KAAK,cAAcwB,YAAY,yBAAyBC,SAAU5B,KAAKJ,aAAcQ,MAAOJ,KAAKT,MAAMC,cAC5I,gCACCQ,KAAKT,MAAMI,SAAY,cAAgB,cAK5C,6BAAS6B,UAAU,gBACjB,yBAAKA,UAAU,WACb,4BACGxB,KAAKT,MAAMG,MAAMmC,KAAI,SAACtB,GACrB,OACE,wBAAIuB,IAAKvB,EAAKS,IACZ,4BAAKT,EAAKC,OACV,0CAAgBD,EAAKE,MACrB,4BAAQsB,QAAS,kBAAM,EAAKC,WAAWzB,EAAKS,MAA5C,eACA,4BAAQQ,UAAU,SAASO,QAAS,kBAAM,EAAKE,WAAW1B,EAAKS,MAA/D,4B,GAlHJkB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1db2fb77.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nconst config = {\n    apiKey: \"AIzaSyDQODjLvkye6BdRE1WzOHKkapMY2FvJFdo\",\n    authDomain: \"fun-food-friends-546ea.firebaseapp.com\",\n    databaseURL: \"https://fun-food-friends-546ea.firebaseio.com\",\n    projectId: \"fun-food-friends-546ea\",\n    storageBucket: \"fun-food-friends-546ea.appspot.com\",\n    messagingSenderId: \"272666238655\",\n    appId: \"1:272666238655:web:85a5527d0ee97b6c8ab00a\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(config);\n\n  export default firebase;","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from './firebase.js';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      currentItem: '',\n      username: '',\n      items: [], \n      isUpdate: false,\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit(e, itemId) {\n    e.preventDefault();\n    const item = {\n      title: this.state.currentItem,\n      user: this.state.username\n    }    \n\n    if (!itemId) {\n      const itemsRef = firebase.database().ref('items');\n      itemsRef.push(item);\n      console.log('add');\n      \n    }\n\n    else {\n      const itemRef = firebase.database().ref(`/items/${itemId}`);\n      itemRef.update(item)\n      console.log('update');\n      \n    }\n    \n    this.setState({\n      username: '',\n      currentItem: '',\n      isUpdate: false,\n      id: ''\n    })\n  }\n\n  componentDidMount() {\n    const itemsRef = firebase.database().ref('items');\n    itemsRef.on('value', (snapshot) => {\n      let items = snapshot.val();\n      let newState = [];\n\n      for (let item in items) {\n        newState.push({\n          id: item,\n          title: items[item].title,\n          user: items[item].user,\n        });\n      }\n\n      this.setState({\n        items: newState\n      })\n    })\n  }\n\n  removeItem(itemId) {\n    const itemRef = firebase.database().ref(`/items/${itemId}`);\n    itemRef.remove();\n  }\n\n  updateItem(itemId) {\n    const itemFound = this.state.items.find(item => item.id === itemId);\n    \n    this.setState({\n      isUpdate: true,\n      id: itemFound.id,\n      username: itemFound.user,\n      currentItem: itemFound.title,\n    })\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className='wrapper'>\n            <h1>Fun Food Friends</h1>\n          </div>\n        </header>\n        <div className='container'>\n          <section className='add-item'>\n            <form onSubmit={(e) => this.handleSubmit(e, this.state.id)}>\n              <input type=\"text\" ref=\"username\" name=\"username\" placeholder=\"What's your name?\" onChange={this.handleChange} value={this.state.username} />\n              <input type=\"text\" ref=\"currentItem\" name=\"currentItem\" placeholder=\"What are you bringing?\" onChange={this.handleChange} value={this.state.currentItem} />\n              <button>\n              {this.state.isUpdate  ? \"Update Item\" : \"Add Item\"}\n              </button>\n            </form>\n\n          </section>\n          <section className='display-item'>\n            <div className='wrapper'>\n              <ul>\n                {this.state.items.map((item) => {\n                  return (\n                    <li key={item.id}>\n                      <h3>{item.title}</h3>\n                      <p>brought by: {item.user}</p>\n                      <button onClick={() => this.removeItem(item.id)}>Remove item</button>\n                      <button className=\"update\" onClick={() => this.updateItem(item.id)}>Update item</button>\n                    </li>\n                  )\n                })}\n              </ul>\n            </div>\n          </section>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}